input {
  redis {
    host => "redis"
    port => "6379"
    data_type => "list"
    key => "logstash"
  }
}

filter {
  if [docker][container][image] =~ /haproxy/ {
    grok {
      break_on_match => true
      match => [
        "message", "%{IP:client_ip}:%{INT:client_port:int} \[%{NOTSPACE:haproxy_timestamp}\] %{NOTSPACE:frontend_name} %{NOTSPACE:backend_name}/%{NOTSPACE:server_name} %{INT:time_client_req:int}/%{INT:time_queue:int}/%{INT:time_backend_connect:int}/%{INT:time_server_response:int}/%{NOTSPACE:time_duration:int} %{INT:status_code:int} %{NOTSPACE:bytes_read:int} %{DATA:captured_request_cookie} %{DATA:captured_response_cookie} %{NOTSPACE:termination_state_with_cookie_status} %{INT:actconn:int}/%{INT:feconn:int}/%{INT:beconn:int}/%{INT:srvconn:int}/%{NOTSPACE:retries:int} %{INT:srv_queue:int}/%{INT:backend_queue:int} (\{%{HAPROXYCAPTUREDREQUESTHEADERS}\})?( )?(\{%{HAPROXYCAPTUREDRESPONSEHEADERS}\})?( )?\"(<BADREQ>|(%{WORD:http_verb} (%{URIPROTO:http_proto}://)?(?:%{USER:http_user}(?::[^@]*)?@)?(?:%{URIHOST:http_host})?(?:%{URIPATHPARAM:http_request})?( HTTP/%{NUMBER:http_version})?))?",
        "message", "%{IP:client_ip}:%{NUMBER:client_port:int} \[%{NOTSPACE:haproxy_timestamp}] %{NOTSPACE:frontend_name} %{NOTSPACE:backend_name}/%{NOTSPACE:server_name} %{NUMBER:time_queue:int}/%{NUMBER:time_backend_connect:int}/%{NUMBER:time_duration:int} %{NUMBER:bytes_read:int} %{NOTSPACE:termination_state} %{NUMBER:actconn:int}/%{NUMBER:feconn:int}/%{NUMBER:beconn:int}/%{NUMBER:srvconn:int}/%{NUMBER:retries:int} %{NUMBER:srv_queue:int}/%{NUMBER:backend_queue:int}" 
      ]
    }

    if [http_request] != "" {
      grok {
        id => "gotrequest"
        break_on_match => true
        match => [
          "http_request", "%{GREEDYDATA:uri_path}\?%{GREEDYDATA:uri_query}",
          "http_request", "%{GREEDYDATA:uri_path}"
        ]
      }
    }

    date {
      match => [ "haproxy_timestamp", "dd/MMM/yyyy:HH:mm:ss.SSS" ]
    }
  }

  # json {
  #   source => "docker"
  #   target => "docker"
  # }
  # grok {
  #   match => [
  #   "full_http_request", "%{WORD:http_verb} %{URIPATHPARAM:http_request}?( HTTP/%{NUMBER:http_version})" ,
  #   "full_http_request", "<%{WORD:http_request}>"
  #   ]
  #   remove_field => [ "full_http_request" ]
  # }

  mutate {
    remove_field => [
      # "[docker][container]",
      "source",
      "[docker][container][labels]",
      "[docker][container][id]"
    ]
  }
}

output {
  elasticsearch {
    hosts => ["elasticsearch"]
    index => "logstash-%{+YYYY.MM.dd}"
  }
}
